"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var SUMMARY_ACTION = {
  ADD: Symbol(),
  REMOVE: Symbol()
};
var Simpler = {
  initialize: function initialize() {
    initializeUI();
  }
};

function SendData(data) {
  // TODO: ... and this one is pretty ugly, too
  data.forEach(function (entry) {
    var entryDiv = getEntry(entry);
    entryDiv.addEventListener("click", function () {
      return entryClicked(entryDiv, entry);
    });
    addToDataContainer(entryDiv);
  });
  renderSummary(summary);
}

var selected = [];
var summary = {};

function calculateSummary(entry, action) {
  var currency = entry.currency || "LCY";
  summary = _objectSpread({}, summary, _defineProperty({}, currency, summary[currency] || 0));

  switch (action) {
    case SUMMARY_ACTION.REMOVE:
      summary[currency] -= entry.amount;
      break;

    case SUMMARY_ACTION.ADD:
      summary[currency] += entry.amount;
      break;
  }
}

function updateSummary(entry, action) {
  calculateSummary(entry, action);
  renderSummary(summary);
} // TODO: This one is still pretty ugly


function entryClicked(entryDiv, entry) {
  if (selected.includes(entry)) {
    entryDiv.classList.remove("selected");
    selected = selected.filter(function (e) {
      return e !== entry;
    });
    updateSummary(entry, SUMMARY_ACTION.REMOVE);
  } else {
    entryDiv.classList.add("selected");
    selected.push(entry);
    updateSummary(entry, SUMMARY_ACTION.ADD);
  }
}

var dataContainer = document.createElement("div");
dataContainer.className = "data";
var summaryContainer = document.createElement("div");
summaryContainer.className = "summary";

function initializeUI() {
  var controlAddIn = document.getElementById("controlAddIn");
  controlAddIn.appendChild(dataContainer);
  controlAddIn.appendChild(summaryContainer);
}

function emptyChildrenFrom(node) {
  while (node.firstChild) {
    node.removeChild(node.firstChild);
  }
}

function renderSummary(summary) {
  emptyChildrenFrom(summaryContainer);
  var summaryLabel = document.createElement("div");
  summaryLabel.className = "label";
  summaryLabel.innerText = "Payment summary";
  summaryContainer.appendChild(summaryLabel);

  if (!selected.length) {
    var summaryInfo = document.createElement("div");
    summaryInfo.className = "info";
    summaryInfo.innerText = "(no invoices selected)";
    summaryContainer.appendChild(summaryInfo);
    return;
  }

  var table = document.createElement("table");
  table.width = "80%";
  var thead = document.createElement("thead");
  table.appendChild(thead);
  var tr = document.createElement("tr");
  thead.appendChild(tr);
  var tdCurrency = document.createElement("td");
  tdCurrency.width = "30%";
  tdCurrency.innerText = "Currency";
  var tdAmount = document.createElement("td");
  tdAmount.width = "70%";
  tdAmount.innerText = "Amount";
  tr.appendChild(tdCurrency);
  tr.appendChild(tdAmount);
  var tbody = document.createElement("tbody");
  table.appendChild(tbody);
  Object.keys(summary).forEach(function (currency) {
    if (!summary[currency]) return;
    var tr = document.createElement("tr");
    tbody.appendChild(tr);
    var tdCurrency = document.createElement("td");
    tdCurrency.innerText = currency;
    var tdAmount = document.createElement("td");
    tdAmount.className = "amount";
    tdAmount.innerText = numeral(summary[currency]).format("0,0.00");
    tr.appendChild(tdCurrency);
    tr.appendChild(tdAmount);
  });
  summaryContainer.appendChild(table);
}

function getEntry(entry) {
  var entryDiv = document.createElement("div");
  entryDiv.id = entry.entryNo;
  entryDiv.className = "entry";
  var dateCaption = document.createElement("div");
  dateCaption.className = "date";
  dateCaption.innerText = entry.documentDate;
  var customerCaption = document.createElement("div");
  customerCaption.className = "customer";
  var customerCaptionNo = document.createElement("div");
  customerCaptionNo.className = "no";
  customerCaptionNo.innerText = entry.customerNo;
  var customerCaptionName = document.createElement("div");
  customerCaptionName.className = "name";
  customerCaptionName.innerText = entry.customerName;
  customerCaption.appendChild(customerCaptionNo);
  customerCaption.appendChild(customerCaptionName);
  var amountDiv = document.createElement("div");
  amountDiv.className = "amount";

  if (entry.currency) {
    var amountCurrency = document.createElement("span");
    amountCurrency.className = "currency";
    amountCurrency.innerText = entry.currency;
    amountDiv.appendChild(amountCurrency);
  }

  var amountNumber = document.createElement("span");
  amountNumber.className = "number";
  amountNumber.innerText = numeral(entry.amount).format("0,0.00");
  amountDiv.appendChild(amountNumber);
  entryDiv.appendChild(dateCaption);
  entryDiv.appendChild(customerCaption);
  entryDiv.appendChild(amountDiv);
  return entryDiv;
}

function emptyDataContainer() {
  emptyChildrenFrom(dataContainer);
}

function addToDataContainer(entryDiv) {
  dataContainer.append(entryDiv);
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
